/*
 * #%L
 * VectorPrintConfig3.0
 * %%
 * Copyright (C) 2011 - 2013 VectorPrint
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
options {
    STATIC = false;
    DEBUG_TOKEN_MANAGER = false;
    DEBUG_PARSER = false;
}
PARSER_BEGIN(PropertiesParser)
    package com.vectorprint.configuration.parser;
    
    import java.util.Map;
    import java.util.List;
    import java.util.ArrayList;
    import com.vectorprint.configuration.EnhancedMap;
    import com.vectorprint.configuration.decoration.ParsingProperties;

    /**
      * A parser for properties in the form key=value, values can span lines by escaping the end of a line:
      * <pre>

          # To change this template, choose Tools | Templates
          # and open the template in the editor.
          diameter=7
          marks=0;89;95
          markcolors=#ee0000;#f7931e;#\
          8cc63f
          lightmarkcolors=#ff0000;#ff9922;#90cf49
      * <pre>
      */
    public class PropertiesParser {

    }
PARSER_END(PropertiesParser)

void parse(Map properties):
{ String[] kv = null;Token cm; List<String> comments = new ArrayList<String>(1);}
{
    (
    	    
        kv=keyValue()
        {
        	if (properties instanceof ParsingProperties) {
                for (String s : comments) {
                    ((ParsingProperties)properties).addCommentBeforeKey(kv[0],s);
                }
                comments.clear();
            }
            properties.put(kv[0],kv[1]);
        }
        |
        cm=<COMMENT>
        {
        	if (properties instanceof EnhancedMap) {
        		comments.add(cm.image);
        	}
        }
    )*
    {
        if (properties instanceof ParsingProperties) {
            for (String s : comments) {
                ((ParsingProperties)properties).addTrailingComment(s);
            }
        }
    }
    <EOF>
}

String[] keyValue():
{ Token t = null; StringBuilder v = new StringBuilder(""); String k ="";}
{
    t=<KEY>
    {
        k=t.image;
    }
    (
         t=<VALUE> 
         {
            v.append(t.image);
         }
    )*
    (
      <EOL> | <EOF>
    )
    {
         return new String[] {k,v.toString()};
    }
}
SKIP:
{
    "=": VALUESTATE
|   "\n"
|   "\r"
|   "\r\n"
|   " "
|   "\t"
}

MORE :
{
  "#" : IN_SINGLE_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
TOKEN:
{
  < COMMENT: ("\n" | "\r" | "\r\n" ) >: DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
  < ~[] >
}

TOKEN :
{
  < KEY: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
      [  
         "$",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
|
  < #PART_LETTER:
      [  
         "$",
         "0"-"9",
         "A"-"Z",
         "_",
         "-",
         "a"-"z",
         "."
      ]
  >
}

<VALUESTATE>
SKIP:
{
    <CONTINUATION: "\\" ("\n"|"\r"|"\r\n")>
}

<VALUESTATE>
TOKEN:
{
    <VALUE: ( ~["\n","\r"])* ~["\\","\n","\r"]>
|   <EOL: ("\n"|"\r"|"\r\n")>: DEFAULT
}