/*
 * #%L
 * VectorPrintConfig3.0
 * %%
 * Copyright (C) 2011 - 2013 VectorPrint
 * %%
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #L%
 */
options {
    STATIC = false;
    DEBUG_TOKEN_MANAGER = false;
    DEBUG_PARSER = false;
}
PARSER_BEGIN(PropertiesParser)
    package com.vectorprint.configuration.parser;
    
    import java.util.Map;
    import java.util.List;
    import java.util.ArrayList;
    import java.io.Writer;
    import java.io.IOException;
    import com.vectorprint.ArrayHelper;
    import com.vectorprint.configuration.EnhancedMap;
    import com.vectorprint.configuration.Settings;
    import com.vectorprint.configuration.decoration.ParsingProperties;
    import com.vectorprint.configuration.binding.settings.AbstractPropertiesParser;
    import com.vectorprint.VectorPrintRuntimeException;

    /**
      * A parser for properties in the form key=value, values can span lines by escaping the end of a line:
      * <pre>

          # To change this template, choose Tools | Templates
          # and open the template in the editor.
          diameter=7
          marks=0;89;95
          markcolors=#ee0000;#f7931e;#\
          8cc63f
          lightmarkcolors=#ff0000;#ff9922;#90cf49
      * <pre>
      */
    public class PropertiesParser extends AbstractPropertiesParser {

    private EnhancedMap properties = null;
      public void parse(EnhancedMap settings) {
         this.properties = settings;
         try {
            parseSettings();
         } catch(Exception e) {
            throw new VectorPrintRuntimeException(e);
         }
      }

   public void serialize(EnhancedMap p, Writer w) throws IOException {
      for (Map.Entry<String, String[]> e : p.entrySet()) {
         if (p instanceof ParsingProperties) {
            ParsingProperties pp = (ParsingProperties) p;
            for (String c : pp.getCommentBeforeKey(e.getKey())) {
               w.append(c);
            }
         }
         w.append(e.getKey());
         w.append('=');
         for (String v : e.getValue()) {
            w.append(v);
            w.append(';');
         }
         w.append(System.getProperty("line.separator"));

      }
      if (p instanceof ParsingProperties) {
         ParsingProperties pp = (ParsingProperties) p;
         for (String c : pp.getTrailingComment()) {
            w.append(c);
         }
      }
   }

    }
PARSER_END(PropertiesParser)

EnhancedMap parseSettings():
{  List<String> kv = null;Token cm; List<String> comments = new ArrayList<String>(1);String key = null;}
{
    (
         kv=keyValue()
         {
             key = kv.get(0);
             if (properties instanceof ParsingProperties) {
                for (String s : comments) {
                    ((ParsingProperties)properties).addCommentBeforeKey(key,s);
                }
             }
             comments.clear();
             kv.remove(0);
             properties.put(key,ArrayHelper.toArray(kv));
         }
        |
         cm=<COMMENT>
         {
             comments.add(cm.image);
         }
    )*
    {
      if (properties instanceof ParsingProperties) {
         for (String s : comments) {
             ((ParsingProperties)properties).addTrailingComment(s);
         }
      }
    }
    <EOF>
    {return properties;}
}

List<String> keyValue():
{ List<String> kv = new ArrayList(2); Token t = null; String v = null; }
{
   t=<KEY> {kv.add(t.image);}
   <EQ>
   v=value() {kv.add(v);}
   (
      <SEMICOLON>
      v=value() {kv.add(v);}   
   )*
   (
      <EOL> | <EOF>
   )
   {return kv;}
}
String value():
{StringBuilder v = new StringBuilder();Token t = null;}
{  
   (
      <ESCAPEDSEMICOLON> {v.append(';');}
      |
      t=<VALUE> {v.append(t.image);}
   )*
   {return v.toString();}
}
SKIP:
{
   "\n"
|   "\r"
|   "\r\n"
|   " "
|   "\t"
}

MORE :
{
  "#" : IN_SINGLE_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
TOKEN:
{
  < COMMENT: ("\n" | "\r" | "\r\n" ) >: DEFAULT
}

<IN_SINGLE_LINE_COMMENT>
MORE :
{
  < ~[] >
}

TOKEN :
{
  < KEY: <LETTER> (<PART_LETTER>)* >
|
  < #LETTER:
      [  
         "$",
         "A"-"Z",
         "_",
         "a"-"z"
      ]
  >
|
  < #PART_LETTER:
      [  
         "$",
         "0"-"9",
         "A"-"Z",
         "_",
         "-",
         "a"-"z",
         "."
      ]
  >
|   <EQ: "="    >: VALUESTATE

}

<VALUESTATE>
SKIP:
{
    <CONTINUATION: "\\" ("\n"|"\r"|"\r\n")>
}

<VALUESTATE>
TOKEN:
{
    <SEMICOLON: ";">
|   <ESCAPEDSEMICOLON: "\\;" >
|   <EOL: ("\n"|"\r"|"\r\n")>: DEFAULT
|   <VALUE: ( ~[";","\r","\n"] )* ~["\\",";","\r","\n"] >
}
